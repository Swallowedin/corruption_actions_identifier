import streamlit as st
import pandas as pd
from openai import OpenAI
import io
from collections import defaultdict

# Configuration de la page
st.set_page_config(page_title="G√©n√©rateur de Mesures de Rem√©diation", layout="wide")

# Configuration OpenAI
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# Donn√©es des processus
PROCESSES = {
    "PILOTAGE": {
        "DIRECTION": "FP-PIL-DIR",
        "INTERNATIONAL": "FP-PIL-INT",
        "PERFORMANCE": "FP-PIL-PERF",
        "DEVELOPPEMENT NATIONAL": "FP-PIL-DEVNAT",
        "DEVELOPPEMENT INTERNATIONAL": "FP-PIL-DEVINT",
        "RSE": "FP-PIL-RSE",
        "GESTION DES RISQUES": "FP-PIL-RISK",
        "FUSIONS ET ACQUISITIONS": "FP-PIL-FUSAC",
        "INNOVATION ET TRANSFO": "FP-PIL-TRA"
    },
    "OPERATIONNELS": {
        "VENTE MAGASIN": "FP-OPE-VMAG",
        "LOGISTIQUE": "FP-OPE-LOG",
        "APPROVISONNEMENT": "FP-OPE-APPRO",
        "ACHATS": "FP-OPE-ACH",
        "SAV": "FP-OPE-SAV",
        "IMPORT": "FP-OPE-IMP",
        "FINANCEMENT": "FP-OPE-FIN",
        "AUTRES MODES DE VENTE": "FP-OPE-AUTVEN",
        "VALORISATION DES DECHETS": "FP-OPE-VALO",
        "QUALITE": "FP-OP-QUALPRO",
        "VENTE WEB": "FP-OPE-VWEB",
        "FRANCHISE": "FP-OPE-FRA"
    },
    "SUPPORT": {
        "COMPTABILITE": "FP-SUP-COMPTA",
        "DSI": "FP-SUP-DSI",
        "GESTION RH": "FP-SUP-DRH",
        "MARKETING ET COM": "FP-SUP-COM",
        "ORGANISATION": "FP-SUP-ORG",
        "TECHNIQUE": "FP-SUP-TEC",
        "JURIDIQUE": "FP-SUP-JUR",
        "SECURITE": "FP-SUP-SEC"
    }
}

# Liste des risques
RISKS = [
    "A.1 - CAD - Cadeaux et invitations d√©rogeant √† la politique",
    "A.2 - CAD - Cadeaux manifestement corruptifs",
    "A.3 - CAD - Prise en charge de prestations anormales par le partenaire",
    "A.4 - CAD - Salons professionnels",
    "A.5 - CAD - D√©marque pour ne pas affecter le compte d'exploitation",
    "B.1 - CON - Conflit d'int√©r√™ts entre un collaborateur et une soci√©t√©",
    "B.2 - CON - Collaborateur favorisant sa propre entreprise / son patrimoine",
    "B.3 - CON - Boulanger / Electro D√©p√¥t",
    "B.4 - CON - United.B & AFM / Electro D√©p√¥t",
    "B.5 - CON - Prestataires √©galement partenaires",
    "B.6 - CON - Gestion du personnel",
    "C.1 - COR - Corruption active d'agent public ou d'√©lu",
    "C.2 - COR - Corruption passive d'agent public ou d'√©lu",
    "C.3 - COR - Corruption active √† l'international",
    "C.4 - COR - Corruption passive √† l'international",
    "C.5 - COR - Trafic d'influence",
    "C.6 - COR - S√©lection d'un prestataire pr√©sentant un risque de corruption important ou av√©r√©",
    "C.7 - COR - Maintien d'une relation d'affaire avec un prestataire en situation de non conformit√© r√®glementaire",
    "C.8 - COR - TPE / PME √† risque",
    "C.9 - COR - R√©trocommission",
    "C.10 - COR - Chantage interne",
    "C.11 - COR - Coutume locale contraire au droit",
    "C.12 - COR - Non-respect des proc√©dures et des normes de qualit√© et de conformit√©",
    "C.13 - COR - Complicit√© de corruption",
    "C.14 - COR - Prestations fictives",
    "C.15 - COR - Sous-traitance",
    "D.1 - FAV - D√©faut de mise en concurrence",
    "D.2 - FAV - D√©tournement de la proc√©dure de mise en concurrence",
    "D.3 - FAV - Rupture d'√©galit√© entre les candidats",
    "D.4 - FAV - Eviction injustifi√©e d'une candidature",
    "D.5 - FAV - S√©lection sur pression",
    "D.6 - FAV - S√©lection d'un prestataire non professionnel",
    "D.7 - FAV - N√©gociation insuffisante",
    "E.1 - FRAUD - Falsification de factures",
    "E.2 - FRAUD - fausse √©criture comptable / Omission d'√©critures comptables",
    "E.3 - FRAUD - Manipulation de caisse",
    "E.4 - FRAUD - Abus de biens sociaux et assimil√©s",
    "E.5 - FRAUD - Fraudes fiscales et douani√®res",
    "E.6 - FRAUD - Diffusion non-autoris√©e de donn√©es",
    "E.7 - FRAUD - Associations fictives",
    "F.1 - MGMT - Carences dans le contr√¥le",
    "F.2 - MGMT - D√©faut de comp√©tence du manager",
    "F.3 - MGMT - Conflit d'int√©r√™ts interne",
    "F.4 - MGMT - D√©faut de culture √©thique",
    "G.1 - LOB - Lobbying"
]

# Standards et r√©f√©rentiels
STANDARDS = {
    "ISO 37001": {
        "4.4": "√âvaluation des risques de corruption",
        "4.5": "Mise en ≈ìuvre des contr√¥les",
        "5.2": "Politique anti-corruption",
        "7.3": "Sensibilisation et formation",
        "8.2": "Due diligence",
        "8.3": "Contr√¥les financiers",
        "8.4": "Contr√¥les non-financiers",
        "8.5": "Contr√¥les anti-corruption",
        "8.7": "Cadeaux, invitations, dons",
        "9.2": "Audit interne"
    },
    "ISO 37301": {
        "4.6": "Identification des obligations de conformit√©",
        "5.1": "Leadership et engagement",
        "6.1": "Actions face aux risques et opportunit√©s",
        "7.2": "Comp√©tence",
        "7.3": "Sensibilisation",
        "8.1": "Planification et contr√¥le op√©rationnels",
        "9.1": "Surveillance et mesure",
        "9.2": "Audit de conformit√©",
        "10.1": "Am√©lioration continue"
    },
    "COSO ERM": {
        "Gouvernance": ["Culture", "Supervision des risques"],
        "Strat√©gie": ["Contexte", "App√©tence au risque"],
        "Performance": ["Identification", "√âvaluation", "Priorisation", "R√©ponses"],
        "Revue": ["R√©vision", "Am√©lioration"],
        "Information": ["Communication", "Reporting"]
    },
    "COSO CI": {
        "Environnement de contr√¥le": ["Int√©grit√©", "Structure", "Autorit√©"],
        "√âvaluation des risques": ["Objectifs", "Identification", "Analyse"],
        "Activit√©s de contr√¥le": ["Politiques", "Proc√©dures"],
        "Information et communication": ["Qualit√©", "Communication interne/externe"],
        "Pilotage": ["√âvaluations", "Suivi"]
    }
}

def generate_measures(risk, process):
    """G√©n√®re des mesures via GPT avec r√©f√©rences aux standards"""
    prompt = f"""Pour le processus {process} et le risque {risk}, proposer des mesures concr√®tes et sp√©cifiques en faisant r√©f√©rence aux standards ISO 37001, ISO 37301, COSO ERM et COSO CI.
    Pour chaque cat√©gorie, donner AU MOINS 3 mesures concr√®tes, chacune avec une r√©f√©rence au standard le plus pertinent.

    Cat√©gories de mesures :
    D = Mesures de d√©tection du risque (comment identifier/d√©tecter)
    R = Mesures de r√©duction du risque (comment r√©duire la probabilit√© ou l'impact)
    A = Mesures d'acceptation du risque (comment g√©rer si on accepte le risque)
    F = Mesures de refus / fin de non-recevoir (quelles limites fixer)
    T = Mesures de transfert du risque (comment transf√©rer √† des tiers)

    Format de r√©ponse attendu :
    [Cat√©gorie][Num√©ro]: [Description d√©taill√©e de la mesure] (R√©f√©rence standard)

    Exemple de format :
    D1: Mise en place d'audits mensuels des transactions suspectes (ISO 37001 9.2)
    D2: Programme de contr√¥le continu des d√©clarations d'int√©r√™ts (COSO CI - Activit√©s de contr√¥le)
    D3: Syst√®me d'alerte automatis√© sur les d√©passements de seuils (ISO 37301 9.1)
    """
    
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=2000
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"Erreur de g√©n√©ration: {str(e)}"

def parse_measures_with_refs(measures_text):
    """Parse les mesures g√©n√©r√©es avec leurs r√©f√©rences"""
    measures_dict = defaultdict(list)
    refs_dict = defaultdict(list)
    
    for line in measures_text.split('\n'):
        if ':' in line and line[0] in ['D', 'R', 'A', 'F', 'T']:
            key, content = line.split(':', 1)
            category = key[0]
            
            # Extraire la mesure et la r√©f√©rence
            content = content.strip()
            if '(' in content and ')' in content:
                measure = content[:content.rfind('(')].strip()
                ref = content[content.rfind('(')+1:content.rfind(')')].strip()
            else:
                measure = content
                ref = "Pas de r√©f√©rence"
            
            measures_dict[category].append(measure)
            refs_dict[f"{category}-{len(measures_dict[category])}"] = ref
                
    return measures_dict, refs_dict

def main():
    st.title("üõ°Ô∏è G√©n√©rateur de Mesures de Rem√©diation des Risques")
    st.markdown("""
    Cette application g√©n√®re des mesures de rem√©diation pour les risques s√©lectionn√©s,
    en se basant sur les standards ISO 37001, ISO 37301, COSO ERM et COSO CI.
    """)
    
    # Layout en colonnes
    col1, col2 = st.columns([1, 2])
    
    with col1:
        # S√©lection de la famille de processus
        famille = st.selectbox(
            "Famille de processus",
            options=list(PROCESSES.keys())
        )
        
        # S√©lection du processus
        processus = None
        if famille:
            processus = st.selectbox(
                "Processus",
                options=list(PROCESSES[famille].keys()),
                format_func=lambda x: f"{x} ({PROCESSES[famille][x]})"
            )

            # S√©lection des risques
            if processus:
                selected_risks = st.multiselect(
                    "Risques √† analyser",
                    options=RISKS
                )

    with col2:
        if processus and selected_risks and st.button("G√©n√©rer les mesures", type="primary"):
            all_measures = {}
            all_refs = {}
            results = []
            
            with st.spinner("G√©n√©ration des mesures en cours..."):
                for risk in selected_risks:
                    st.subheader(f"üìä {risk}")
                    measures_text = generate_measures(risk, processus)
                    measures_dict, refs_dict = parse_measures_with_refs(measures_text)
                    all_measures[risk] = measures_dict
                    all_refs[risk] = refs_dict
                    
                    # Affichage des mesures
                    tab_detect, tab_reduc, tab_accept = st.tabs(["D√©tection", "R√©duction", "Acceptation"])
                    tab_refus, tab_transf = st.tabs(["Refus", "Transfert"])
                    
                    with tab_detect:
                        st.write("**Mesures de d√©tection**")
                        for i, measure in enumerate(measures_dict.get('D', []), 1):
                            ref = refs_dict.get(f"D-{i}", "")
                            st.write(f"‚Ä¢ {measure}")
                            st.write(f"  *Ref: {ref}*")
                    
                    with tab_reduc:
                        st.write("**Mesures de r√©duction**")
                        for i, measure in enumerate(measures_dict.get('R', []), 1):
                            ref = refs_dict.get(f"R-{i}", "")
                            st.write(f"‚Ä¢ {measure}")
                            st.write(f"  *Ref: {ref}*")
                    
                    with tab_accept:
                        st.write("**Mesures d'acceptation**")
                        for i, measure in enumerate(measures_dict.get('A', []), 1):
                            ref = refs_dict.get(f"A-{i}", "")
                            st.write(f"‚Ä¢ {measure}")
                            st.write(f"  *Ref: {ref}*")
                    
                    with tab_refus:
                        st.write("**Mesures de refus**")
                        for i, measure in enumerate(measures_dict.get('F', []), 1):
                            ref = refs_dict.get(f"F-{i}", "")
                            st.write(f"‚Ä¢ {measure}")
                            st.write(f"  *Ref: {ref}*")
                    
                    with tab_transf:
                        st.write("**Mesures de transfert**")
                        for i, measure in enumerate(measures_dict.get('T', []), 1):
                            ref = refs_dict.get(f"T-{i}", "")
                            st.write(f"‚Ä¢ {measure}")
                            st.write(f"  *Ref: {ref}*")
                    
                    st.divider()
                    
                    # Stockage pour export
                    results.append({
                        "Processus": processus,
                        "R√©f√©rence": PROCESSES[famille][processus],
                        "Risque": risk,
                        "Mesures": measures_text
                    })

            # Analyse des mesures communes si plusieurs risques s√©lectionn√©s
            if len(selected_risks) > 1:
                st.subheader("üîÑ Mesures communes identifi√©es")
                common_measures = find_common_measures(all_measures)
                
                for category, measures in common_measures.items():
                    category_names = {
                        'D': 'D√©tection',
                        'R': 'R√©duction',
                        'A': 'Acceptation',
                        'F': 'Refus',
                        'T': 'Transfert'
                    }
                    
                    common = {m: count for m, count in measures.items() if count > 1}
                    if common:
                        st.write(f"**Mesures de {category_names[category]} communes:**")
                        for measure, count in common.items():
                            st.write(f"‚Ä¢ {measure} _(pr√©sente dans {count} risques)_")
                        st.write("")

            # Export Excel
            if results:
                df = pd.DataFrame(results)
                df_refs = pd.DataFrame([
                    {
                        "Risque": risk,
                        "Cat√©gorie": cat,
                        "Mesure": measure,
                        "R√©f√©rence": refs_dict[f"{cat}-{i+1}"]
                    }
                    for risk, (measures_dict, refs_dict) in zip(all_measures.keys(), zip(all_measures.values(), all_refs.values()))
                    for cat, measures in measures_dict.items()
                    for i, measure in enumerate(measures)
                ])
                
                # Cr√©ation du fichier Excel
                buffer = io.BytesIO()
                with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                    df.to_excel(writer, sheet_name='Vue g√©n√©rale', index=False)
                    df_refs.to_excel(writer, sheet_name='Mesures d√©taill√©es', index=False)
                    
                    # Ajout d'une feuille pour les standards
                    df_standards = pd.DataFrame([
                        {
                            "Standard": standard,
                            "Section": section,
                            "Description": desc if isinstance(desc, str) else ", ".join(desc)
                        }
                        for standard, sections in STANDARDS.items()
                        for section, desc in sections.items()
                    ])
                    df_standards.to_excel(writer, sheet_name='R√©f√©rentiel', index=False)
                    
                    if len(selected_risks) > 1:
                        # Ajout des mesures communes
                        df_common = pd.DataFrame([
                            {
                                "Cat√©gorie": cat,
                                "Mesure": measure,
                                "Nombre de risques": count
                            }
                            for cat, measures in common_measures.items()
                            for measure, count in measures.items()
                            if count > 1
                        ])
                        df_common.to_excel(writer, sheet_name='Mesures communes', index=False)
                
                st.download_button(
                    label="üì• T√©l√©charger le rapport complet",
                    data=buffer.getvalue(),
                    file_name=f"mesures_remediation_{processus}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

if __name__ == "__main__":
    main()
